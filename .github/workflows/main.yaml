---
name: main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DATREE_TOKEN: ${{ secrets.DATREE_TOKEN }}

jobs:
  env:
    uses: devxp-tech/.github/.github/workflows/env.yaml@main

  yaml-linter:
    name: Yaml Linter üßπ
    runs-on: ubuntu-latest
    needs:
      - env
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Yaml Lint
        uses: ibiqlik/action-yamllint@2576378a8e339169678f9939646ee3ee325e845c # v3
        with:
          no_warnings: true

  kube-linter:
    name: Kube Linter üßπ
    runs-on: ubuntu-latest
    needs:
      - env
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Scan repo
        id: kube-lint-repo
        uses: stackrox/kube-linter-action@5792edc6a03735d592b13c08201711327a935735 # v1.0.5
        with:
          directory: apps
          format: sarif
          output-file: kube-linter.sarif
        continue-on-error: true

  secret-find:
    name: Secrets Find üîç
    runs-on: ubuntu-latest
    needs:
      - env
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Find Secrets üîç
        shell: bash
        run: |
          if find apps/ -name '*.yaml' | xargs grep -q "kind: Secret"; then
              echo "Fail, secret found! :("
              exit 1
          else
              echo "Success, secret not found! :)"
              exit 0
          fi

  # datree-check:
  #   name: Datree Check üîí
  #   runs-on: ubuntu-latest
  #   needs:
  #     - env
  #   steps:
  #     - name: Checkout üõéÔ∏è
  #       uses: actions/checkout@v3
  #     - name: Run Datree Policy Check
  #       uses: datreeio/action-datree@main
  #       with:
  #         path: 'apps/*/base/*.yaml'
  #         cliArguments: '--only-k8s-files --ignore-missing-schemas'

  trivy-scan:
    name: Trivy Vulnerability Scanner üîí
    needs:
      - env
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code üõéÔ∏è
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Run Trivy vulnerability scanner in IaC mode üîé
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@2e230e8fe0ad3a14a340ad0815ddb96d599d2aff # v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # quality-gate:
  #   uses: devxp-tech/.github/.github/workflows/sonarqube.yaml@main
  #   secrets: inherit
  #   needs:
  #     - env
  #     - yaml-linter
  #     - kube-linter
  #     - secret-find
  #     # - datree-check
  #     - trivy-scan

  tools-version:
    name: Update TOOLING.md üîí
    runs-on: ubuntu-latest
    needs:
      - env

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install yq
      run: |
        sudo add-apt-repository -y ppa:rmescandon/yq
        sudo apt-get update
        sudo apt-get install -y yq

    - name: Find and Process kustomization.yaml Files
      run: |
        # Find all kustomization.yaml files in the apps/ directory
        files=$(find apps/ -name "kustomization.yaml")

        # Prepare output content

        output_content="# üî© Tooling \n"
        output_content+="|      Tools       | Version | Repo | Status |\n"
        output_content+="| :--------------: | :-----: | :---: | :------: |\n"

        # Loop through each file
        for file in $files; do
            # Get the name, version, and repo from the kustomization.yaml file using yq
            name=$(yq eval '.helmCharts[0].name' $file)
            version=$(yq eval '.helmCharts[0].version' $file)
            repo=$(yq eval '.helmCharts[0].repo' $file)

            # Check if both name and version are not null
            if [ "$name" != "null" ] && [ "$version" != "null" ]; then
                # Check if repo is null
                if [ "$repo" != "null" ]; then
                    # Append the name, version, repo, and deployed status to output_content
                    output_content+="| $name | $version | $repo |   ‚úÖ     |\n"
                else
                    # Append the name, version, and deployed status without repo to output_content
                    output_content+="| $name | $version |    -    |   ‚úÖ     |\n"
                fi
            fi
        done

        # Sort the output content
        output_content=$(echo -e "$output_content" | sort -u -k 2)

        # Replace the specific section in TOOLING.md with the new content
        sed -i '/| *Tools *| *Version *| *Repo *| *Status *|/,$d' TOOLING.md
        echo -e "$output_content" >> TOOLING.md

    - name: Commit and Push Changes üìù
      run: |
        if [[ $(git diff) ]];
        then
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add TOOLING.md
          git commit -m "[ci skip] :robot: [github actions actor] - update TOOLING.md"
          git push
        else
          echo "nothing to do!!!"
        fi

  notify:
    uses: devxp-tech/.github/.github/workflows/notify.yaml@main
    if: always()
    secrets: inherit
    needs:
      - env
      - yaml-linter
      - kube-linter
      - secret-find
      # - datree-check
      # - quality-gate
      - tools-version
      - trivy-scan
