prometheus-node-exporter:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                  - fargate
  resources:
    requests:
      cpu: 200m
      memory: 105M
    limits:
      cpu: 400m
      memory: 279M
  fullnameOverride: node-exporter
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: instance

prometheus:
  additionalRulesForClusterRole:
    - apiGroups: [""]
      resources:
        - nodes/proxy
      verbs: ["get", "list", "watch"]
    - apiGroups:
        - "extensions"
        - "networking.k8s.io"
      resources:
        - ingresses/status
        - ingresses
      verbs:
        - get
        - list
        - watch
    - nonResourceURLs:
        - "/metrics"
      verbs:
        - get
  # thanosService:
  #   enabled: true # Enable Mimir
  # thanosServiceMonitor:
  #   enabled: true # Enable Mimir
  prometheusSpec:
    externalUrl: https://prometheus.devxp-tech.io/
    externalLabels:
      cluster: lgseksd1
      environment: development
    remoteWrite: # Enable Mimir
      - url: http://mimir-nginx.monitoring.svc:80/api/v1/push
        queueConfig:
          capacity: 500
          maxShards: 100
          maxSamplesPerSend: 100
    alertingEndpoints:
      - name: prometheus-community-kube-alertmanager
        namespace: monitoring
        port: http-web
        pathPrefix: /
    resources:
      requests:
        cpu: "500m"
        memory: "2500Mi" #2800Mi
      limits:
        cpu: "800m"
        memory: "4000Mi" #4000Mi
    replicas: 1 # 3 to 1 enabled Mimir
    replicaExternalLabelName: "__replica__"
    podAntiAffinity: hard
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    retentionSize: "6GB"
    retention: 2d
    walCompression: true
    enableAdminAPI: true
    # thanos: # Enable Mimir
    #   image: quay.io/thanos/thanos:v0.32.0
    #   version: "v0.31.0"
    #   objectStorageConfig:
    #     name: thanos-objstore-secret
    #     key: objstore.yml
    defaultRules:
      rules:
        kubeControllerManager: false
        kubeSchedulerAlerting: false
    additionalScrapeConfigs:
      - job_name: "prometheus"
        scrape_interval: 30s
        static_configs:
          - targets: ["prometheus-community-kube-prometheus:9090"]

      - job_name: "node-exporter"
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: "node-exporter"
            action: keep

      - job_name: "kubernetes-apiservers"
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels:
              [
                __meta_kubernetes_namespace,
                __meta_kubernetes_service_name,
                __meta_kubernetes_endpoint_port_name,
              ]
            action: keep
            regex: default;kubernetes;https

      - job_name: "kubernetes-nodes"
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: "kubernetes-pods"
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: "kubernetes-cadvisor"
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: "kubernetes-service-endpoints"
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: kubernetes_node
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [
                __address__,
                __meta_kubernetes_service_annotation_prometheus_io_port,
              ]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_namespace

      # - job_name: kube-state-metrics
      #   honor_timestamps: true
      #   scrape_interval: 1m
      #   scrape_timeout: 1m
      #   metrics_path: /metrics
      #   scheme: http
      #   static_configs:
      #     - targets:
      #         - prometheus-community-kube-state-metrics.monitoring.svc:8080

      # - job_name: kiali
      #   metrics_path: /metrics
      #   scrape_interval: 60s
      #   static_configs:
      #     - targets:
      #         - kiali.kiali-operator.svc.cluster.local:9090

      # - job_name: kubecost
      #   honor_labels: true
      #   scrape_interval: 2m
      #   scrape_timeout: 10s
      #   metrics_path: /metrics
      #   scheme: http
      #   dns_sd_configs:
      #     - names:
      #         - kubecost-cost-analyzer.kubecost
      #       type: "A"
      #       port: 9003

      # - job_name: serviceMonitor/argocd/argocd-metrics/0
      #   honor_timestamps: true
      #   scrape_interval: 120s
      #   scrape_timeout: 10s
      #   metrics_path: /metrics
      #   scheme: http
      #   follow_redirects: true
      #   relabel_configs:
      #     - source_labels: [job]
      #       separator: ;
      #       regex: (.*)
      #       target_label: __tmp_prometheus_job_name
      #       replacement: $1
      #       action: replace
      #     - source_labels:
      #         [__meta_kubernetes_service_label_app_kubernetes_io_name]
      #       separator: ;
      #       regex: argocd-metrics
      #       replacement: $1
      #       action: keep
      #     - source_labels: [__meta_kubernetes_endpoint_port_name]
      #       separator: ;
      #       regex: metrics
      #       replacement: $1
      #       action: keep
      #     - source_labels:
      #         [
      #           __meta_kubernetes_endpoint_address_target_kind,
      #           __meta_kubernetes_endpoint_address_target_name,
      #         ]
      #       separator: ;
      #       regex: Node;(.*)
      #       target_label: node
      #       replacement: ${1}
      #       action: replace
      #     - source_labels:
      #         [
      #           __meta_kubernetes_endpoint_address_target_kind,
      #           __meta_kubernetes_endpoint_address_target_name,
      #         ]
      #       separator: ;
      #       regex: Pod;(.*)
      #       target_label: pod
      #       replacement: ${1}
      #       action: replace
      #     - source_labels: [__meta_kubernetes_namespace]
      #       separator: ;
      #       regex: (.*)
      #       target_label: namespace
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: service
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: pod
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_pod_container_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: container
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: job
      #       replacement: ${1}
      #       action: replace
      #     - separator: ;
      #       regex: (.*)
      #       target_label: endpoint
      #       replacement: metrics
      #       action: replace
      #     - source_labels: [__address__]
      #       separator: ;
      #       regex: (.*)
      #       modulus: 1
      #       target_label: __tmp_hash
      #       replacement: $1
      #       action: hashmod
      #     - source_labels: [__tmp_hash]
      #       separator: ;
      #       regex: "0"
      #       replacement: $1
      #       action: keep
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #       kubeconfig_file: ""
      #       follow_redirects: true
      #       namespaces:
      #         names:
      #           - argocd

      # - job_name: serviceMonitor/argocd/argocd-repo-server-metrics/0
      #   honor_timestamps: true
      #   scrape_interval: 120s
      #   scrape_timeout: 10s
      #   metrics_path: /metrics
      #   scheme: http
      #   follow_redirects: true
      #   relabel_configs:
      #     - source_labels: [job]
      #       separator: ;
      #       regex: (.*)
      #       target_label: __tmp_prometheus_job_name
      #       replacement: $1
      #       action: replace
      #     - source_labels:
      #         [__meta_kubernetes_service_label_app_kubernetes_io_name]
      #       separator: ;
      #       regex: argocd-repo-server
      #       replacement: $1
      #       action: keep
      #     - source_labels: [__meta_kubernetes_endpoint_port_name]
      #       separator: ;
      #       regex: metrics
      #       replacement: $1
      #       action: keep
      #     - source_labels:
      #         [
      #           __meta_kubernetes_endpoint_address_target_kind,
      #           __meta_kubernetes_endpoint_address_target_name,
      #         ]
      #       separator: ;
      #       regex: Node;(.*)
      #       target_label: node
      #       replacement: ${1}
      #       action: replace
      #     - source_labels:
      #         [
      #           __meta_kubernetes_endpoint_address_target_kind,
      #           __meta_kubernetes_endpoint_address_target_name,
      #         ]
      #       separator: ;
      #       regex: Pod;(.*)
      #       target_label: pod
      #       replacement: ${1}
      #       action: replace
      #     - source_labels: [__meta_kubernetes_namespace]
      #       separator: ;
      #       regex: (.*)
      #       target_label: namespace
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: service
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: pod
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_pod_container_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: container
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: job
      #       replacement: ${1}
      #       action: replace
      #     - separator: ;
      #       regex: (.*)
      #       target_label: endpoint
      #       replacement: metrics
      #       action: replace
      #     - source_labels: [__address__]
      #       separator: ;
      #       regex: (.*)
      #       modulus: 1
      #       target_label: __tmp_hash
      #       replacement: $1
      #       action: hashmod
      #     - source_labels: [__tmp_hash]
      #       separator: ;
      #       regex: "0"
      #       replacement: $1
      #       action: keep
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #       kubeconfig_file: ""
      #       follow_redirects: true
      #       namespaces:
      #         names:
      #           - argocd
      # - job_name: serviceMonitor/argocd/argocd-server-metrics/0
      #   honor_timestamps: true
      #   scrape_interval: 120s
      #   scrape_timeout: 10s
      #   metrics_path: /metrics
      #   scheme: http
      #   follow_redirects: true
      #   relabel_configs:
      #     - source_labels: [job]
      #       separator: ;
      #       regex: (.*)
      #       target_label: __tmp_prometheus_job_name
      #       replacement: $1
      #       action: replace
      #     - source_labels:
      #         [__meta_kubernetes_service_label_app_kubernetes_io_name]
      #       separator: ;
      #       regex: argocd-server-metrics
      #       replacement: $1
      #       action: keep
      #     - source_labels: [__meta_kubernetes_endpoint_port_name]
      #       separator: ;
      #       regex: metrics
      #       replacement: $1
      #       action: keep
      #     - source_labels:
      #         [
      #           __meta_kubernetes_endpoint_address_target_kind,
      #           __meta_kubernetes_endpoint_address_target_name,
      #         ]
      #       separator: ;
      #       regex: Node;(.*)
      #       target_label: node
      #       replacement: ${1}
      #       action: replace
      #     - source_labels:
      #         [
      #           __meta_kubernetes_endpoint_address_target_kind,
      #           __meta_kubernetes_endpoint_address_target_name,
      #         ]
      #       separator: ;
      #       regex: Pod;(.*)
      #       target_label: pod
      #       replacement: ${1}
      #       action: replace
      #     - source_labels: [__meta_kubernetes_namespace]
      #       separator: ;
      #       regex: (.*)
      #       target_label: namespace
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: service
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: pod
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_pod_container_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: container
      #       replacement: $1
      #       action: replace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       separator: ;
      #       regex: (.*)
      #       target_label: job
      #       replacement: ${1}
      #       action: replace
      #     - separator: ;
      #       regex: (.*)
      #       target_label: endpoint
      #       replacement: metrics
      #       action: replace
      #     - source_labels: [__address__]
      #       separator: ;
      #       regex: (.*)
      #       modulus: 1
      #       target_label: __tmp_hash
      #       replacement: $1
      #       action: hashmod
      #     - source_labels: [__tmp_hash]
      #       separator: ;
      #       regex: "0"
      #       replacement: $1
      #       action: keep
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #       kubeconfig_file: ""
      #       follow_redirects: true
      #       namespaces:
      #         names:
      #           - argocd
