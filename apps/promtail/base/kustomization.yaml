apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: logging
helmCharts:
  - name: promtail
    includeCRDs: true
    releaseName: promtail
    version: 6.15.5
    repo: https://grafana.github.io/helm-charts
    valuesInline:
      fullnameOverride: promtail
      # serviceMonitor:
      #   enabled: true
      # prometheusRule:
      #   enabled: true
      extraEnv:
        - name: JAEGER_AGENT_HOST
          value: otel-collector.observability.svc.cluster.local
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
      resources:
        requests:
          cpu: 100m
          memory: 64Mi
        limits:
          cpu: 200m
          memory: 128Mi
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: eks.amazonaws.com/compute-type
                    operator: NotIn
                    values:
                      - fargate
      config:
        enableTracing: true
        clients:
          - url: http://loki-gateway.logging.svc/loki/api/v1/push
            external_labels:
              cluster: lgseksd1
              environment: development
        snippets:
          pipelineStages:
            - cri: {}
            - drop:
                source: "container"
                expression: "istio-proxy"
            - drop:
                source: "container"
                expression: "istio-init"
            # - match:
            #     selector: '{app=".*"}'
            #     stages:
            #       - regex:
            #           expression: ".*(?P<trace>trace_id\"\\S)\\s\"(?P<traceID>[a-zA-Z\\d]+).*"
            #           traceID: traceID
            #       - labels:
            #           traceID:
            - json:
                expressions:
                  timestamp: '@timestamp'
                  version: '@version'
                  message: message
                  logger_name: logger_name
                  thread_name: thread_name
                  level: level
                  level_value: level_value
                  trace_id: trace_id
                  span_id: span_id
            - regex:
                expression: '"trace_id":"(?P<trace_id>[a-zA-Z0-9]+)"'
            - regex:
                expression: 'trace_id":"(?P<trace_id>[a-zA-Z0-9]+)"'
            - regex:
                expression: '"span_id":"(?P<span_id>[a-zA-Z0-9]+)"'
            - regex:
                expression: 'span_id":"(?P<span_id>[a-zA-Z0-9]+)"'
            - regex:
                expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z)\s+(?P<level>[A-Z]+)\s+\w+\/\w+.\w+:\d+\s+(?P<message>[^"]+)"service":\s+"(?P<service>\w+)".+"trace_id":\s+"(?P<trace_id>[a-zA-Z0-9]+)".+"span_id":\s+"(?P<span_id>[a-zA-Z0-9]+)"'
            - labels:
                timestamp: timestamp
                version: version
                message: message
                logger_name: logger_name
                thread_name: thread_name
                level: level
                level_value: level_value
                traceID: trace_id
                spanID: span_id
                service: service
            - metrics:
                grpc_latency:
                  type: Histogram
                  description: "gRPC latency (ns)"
                  source: latency
                  config:
                    buckets: [0,10000000,20000000,30000000,50000000,80000000,100000000,500000000,1000000000,10000000000,100000000000,1000000000000]
            - timestamp:
                format: RFC3339
                source: "time"
            - output:
                source: message
