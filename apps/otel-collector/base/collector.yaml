apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: observability
spec:
  mode: deployment
  config: |
    extensions:
      health_check:
      pprof:
      zpages:
    receivers:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
      otlp:
        protocols:
          grpc:
          http:
      zipkin:
      otlp/spanmetrics:
        protocols:
          grpc:
            endpoint: 0.0.0.0:12346

    connectors:
      spanmetrics:
        histogram:
          explicit:
            buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
        dimensions:
          - name: http.method
            default: GET
          - name: http.status_code
        dimensions_cache_size: 1000
        aggregation_temporality: 'AGGREGATION_TEMPORALITY_CUMULATIVE'
      servicegraph:
        latency_histogram_buckets: [100ms, 250ms, 1s, 5s, 10s]
        dimensions:
          - dimension-1
          - dimension-2
        store:
          ttl: 1s
          max_items: 10


    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s

    exporters:
      logging:
      otlp/tempo:
        endpoint: "tempo.observability.svc:4317"
        tls:
          insecure: true
      prometheusremotewrite:
        endpoint: http://prometheus-prometheus.monitoring.svc:9090/api/v1/write
        target_info:
          enabled: true
      prometheus/servicegraph:
        endpoint: localhost:9090
        namespace: servicegraph

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [jaeger, otlp, zipkin]
          processors: [memory_limiter, batch]
          exporters: [logging, otlp/tempo, spanmetrics, servicegraph]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [memory_limiter, batch]
          exporters: [logging, prometheusremotewrite]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [logging]
        metrics/servicegraph:
          receivers: [servicegraph]
          exporters: [prometheus/servicegraph]
