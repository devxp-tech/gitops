apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: observability
spec:
  # mode: statefulset
  # image: otel/opentelemetry-collector-contrib:0.90.1
  replicas: 1
  podDisruptionBudget:
    maxUnavailable: 1
  resources:
    requests:
      cpu: 30m
      memory: 256Mi
    limits:
      cpu: 50m
      memory: 384Mi
  config:
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_http:
            endpoint: 0.0.0.0:14268
          # grpc:
          # thrift_http:
          # thrift_compact:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 30s
              honor_labels: true #default false
              static_configs:
                - targets: ['127.0.0.1:8888']
      zipkin:
        endpoint: 0.0.0.0:9411

    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 5000
        timeout: 10s

    exporters:
      otlp/tempo:
        endpoint: "tempo.observability.svc:4317"
        tls:
          insecure: true

      prometheusremotewrite:
        endpoint: http://mimir-nginx.monitoring.svc:80/api/v1/push
        remote_write_queue:
          enabled: true
          num_consumers: 30
        retry_on_failure:
          enabled: false
        resource_to_telemetry_conversion:
          enabled: true

    connectors:
      servicegraph:
        dimensions:
          - http.method
        latency_histogram_buckets: [1, 2, 3, 4, 5]
        store:
          max_items: 10
          ttl: 1s
      spanmetrics:
        aggregation_temporality: AGGREGATION_TEMPORALITY_CUMULATIVE
        dimensions:
          - default: GET
            name: http.method
          - name: http.status_code
        dimensions_cache_size: 1000
        exemplars:
          enabled: true
        histogram:
          explicit:
            buckets:
              - 100us
              - 1ms
              - 2ms
              - 6ms
              - 10ms
              - 100ms
              - 250ms
              - 500ms
              - 1000ms
              - 1400ms
              - 2000ms
              - 5s
              - 10s
              - 30s
              - 60s
              - 120s
              - 300s
              - 600s
        metrics_flush_interval: 15s


    # extensions:
    #   health_check:
    #   pprof:
    #   zpages:

    service:
      # extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: [prometheus, otlp, servicegraph, spanmetrics]
          processors: [memory_limiter, batch]
          exporters: [prometheusremotewrite]
        traces:
          receivers: [jaeger, otlp, zipkin]
          processors: [memory_limiter, batch]
          exporters: [otlp/tempo, servicegraph, spanmetrics]
        # logs:
        #   receivers: [otlp]
        #   processors: [memory_limiter, batch]
