apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: observability
spec:
  mode: statefulset #test
  # image: otel/opentelemetry-collector-contrib:0.90.1
  replicas: 1
  config:
    receivers:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
      otlp:
        protocols:
          grpc:
          http:
      zipkin:

    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 5000
        timeout: 10s
      span:
        metrics_exporter: prometheus
        dimensions:
          - name: http.method
            default: GET
          - name: http.status_code
        dimensions_cache_size: 1000
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"

      servicegraph:
        metrics_exporter: prometheus/servicegraph # Exporter to send metrics to
        latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms] # Buckets for latency histogram
        dimensions: [cluster, namespace] # Additional dimensions (labels) to be added to the metrics extracted from the resource and span attributes
        store: # Configuration for the in-memory store
          ttl: 2s # Value to wait for an edge to be completed
          max_items: 200 # Amount of edges that will be stored in the storeMap

    exporters:
      debug:
      otlp/tempo:
        endpoint: "tempo.observability.svc:4317"
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"

    connectors:
      spanmetrics:
      servicegraph:
        store:
          ttl: 30s
          max_items: 50

    extensions:
      health_check:
      pprof:
      zpages:

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: [otlp, servicegraph]
          processors: [memory_limiter, batch]
          exporters: [debug, prometheus]
        traces:
          receivers: [jaeger, otlp, zipkin]
          processors: [memory_limiter, batch]
          exporters: [debug, otlp/tempo, servicegraph] #spanmetrics
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug]
        # metrics/spanmetrics:
        #   receivers: [spanmetrics]
        #   processors: [memory_limiter, batch]
        #   exporters: [prometheus]
        ### Test
        traces/servicegraph:
          receivers: [otlp]
          processors: [span, servicegraph]
          exporters: [otlp/dummy-exporter] # dummy
        metrics/spanmetrics:
            receivers: [otlp/dummy-receiver]
            processors: [memory_limiter, batch]
            exporters: [prometheus]
        metrics/servicegraph:
          receivers: [otlp/dummy-receiver] # dummy
          processors: [memory_limiter, batch]
          exporters: [prometheus]
