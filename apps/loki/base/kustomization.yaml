apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: logging
helmCharts:
  - name: loki
    includeCRDs: true
    releaseName: loki
    namespace: logging
    version: 6.6.3 #2.9.11
    repo: https://grafana.github.io/helm-charts
    valuesInline:
      serviceAccount:
        name: loki
        annotations:
          "eks.amazonaws.com/role-arn": "arn:aws:iam::239468932737:role/loki-lgseksd1-sa"
        automountServiceAccountToken: true
      lokiCanary:
        enabled: false
      loki:
        auth_enabled: false
        commonConfig:
          replication_factor: 1
        storage:
          type: s3
          s3ForcePathStyle: true
          s3:
            region: us-east-1
          bucketNames:
            chunks: "vex-dev-loki-logs"
            ruler: "vex-dev-loki-logs"
            admin: "vex-dev-loki-logs"
        ingester:
          autoforget_unhealthy: true
        rulerConfig:
          enable_api: true
          enable_sharding: true
          # storage:
          #   type: local
          #   local:
          #     directory: "/var/loki/rules"
          # rule_path: "/var/loki/rules"
          wal:
            dir: /loki/ruler-wal
          enable_alertmanager_v2: true
          alertmanager_url: http://prometheus-community-kube-alertmanager.monitoring.svc.cluster.local:9093
          external_url: "https://grafana.devxp-tech.io"
          datasource_uid: "loki"
          remote_write:
            enabled: true
            clients:
              mimir:
                url:  http://mimir-nginx.monitoring.svc:80/api/v1/push
                send_exemplars: true
                queue_config:
                  # send immediately as soon as a sample is generated
                  capacity: 1
                  min_backoff: 1m
                  max_backoff: 5m
                  batch_send_deadline: 5m
        schemaConfig:
          configs:
            - from: "2024-04-01"
              index:
                period: 24h
                prefix: index_
              object_store: s3
              schema: v13
              store: tsdb
        limits_config:
          split_queries_by_interval: 15m
          retention_period: 7d
          reject_old_samples: true
          reject_old_samples_max_age: 168h
          max_cache_freshness_per_query: 10m
          ingestion_rate_mb: 8
          ingestion_burst_size_mb: 16
        query_scheduler:
          max_outstanding_requests_per_tenant: 2048
        querier:
          max_concurrent: 20
        tracing:
          enabled: true
      monitoring:
        serviceMonitor:
          enabled: true
        dashboards:
          enabled: true
          namespace: monitoring
        selfMonitoring:
          enabled: false
          grafanaAgent:
            installOperator: false
      ruler:
        enabled: true
        directories:
          tenant_foo:
              rules.txt: |
                groups:
                  - name: backstage
                    rules:
                      - alert: BackstageNotFoundError
                        expr: |
                          sum(rate({app="backstage"} |= `NotFoundError` [5m])) by (job) > 0.05
                        for: 10m
                        labels:
                          severity: warning
                          team: devops
                          category: logs
                        annotations:
                          title: "Backstage NotFoundError"
                          description: "something is logging a lot"
                          summary: High error rate
      test:
        enabled: false
      persistence:
        enabled: true
      backend:
        replicas: 2
      read:
        replicas: 2
      write:
        replicas: 2

